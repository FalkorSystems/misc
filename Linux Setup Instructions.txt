####
## Falkor Linux Installation Instructions
####

# Launch Terminal, lock to Launcher
# unlock useless open office stuff from launcher

# Get upgrades
sudo apt-get update
sudo apt-get upgrade

## OpenCV
# http://www.samontab.com/web/2012/06/installing-opencv-2-4-1-ubuntu-12-04-lts/

# dependencies
sudo apt-get install build-essential libgtk2.0-dev libjpeg-dev libtiff4-dev libjasper-dev libopenexr-dev cmake python-dev python-numpy python-scipy python-tk libtbb-dev libeigen2-dev yasm libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev libqt4-dev libqt4-opengl-dev sphinx-common texlive-latex-extra libv4l-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev ruby rubygems erubis

# Get OpenCV
cd ~
wget http://downloads.sourceforge.net/project/opencvlibrary/opencv-unix/2.4.2/OpenCV-2.4.2.tar.bz2
tar -xvf OpenCV-2.4.2.tar.bz2
cd OpenCV-2.4.2

# build Makefiles
mkdir build
cd build
cmake -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON ..

# Make sure the config looks right

# Make
make
sudo make install

# Configure
sudo echo /usr/local/lib >> /etc/ld.so.conf.d/opencv.conf
sudo ldconfig

sudo echo >> /etc/bash.bashrc <<EOF
PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig
export PKG_CONFIG_PATH
EOF

# Build samples
cd ~/OpenCV-2.4.2/samples/c
chmod +x build_all.sh
./build_all.sh


# Run some tests
./facedetect --cascade="/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml" --scale=1.5 lena.jpg

./facedetect --cascade="/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml" --nested-cascade="/usr/local/share/OpenCV/haarcascades/haarcascade_eye.xml" --scale=1.5 lena.jpg

~/OpenCV-2.4.2/build/bin/grabcut ~/OpenCV-2.4.2/samples/cpp/lena.jpg

~/OpenCV-2.4.2/build/bin/calibration_artificial

python ~/OpenCV-2.4.2/samples/python2/turing.py

# Clean
cd ~
rm -rf ~/OpenCV-2.4.2*

## ROS
# http://www.ros.org/wiki/fuerte/Installation/Ubuntu

sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu precise main" > /etc/apt/sources.list.d/ros-latest.list'

wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
sudo apt-get update

sudo apt-get install ros-fuerte-desktop-full python-rosinstall python-rosdep doxygen rubygems1.8 libxslt1-dev omniorb libreadline-dev omniorb omniidl omniorb-nameserver libomniorb4-1 libomniorb4-dev libomnithread3-dev libomnithread3c2 gccxml antlr libantlr-dev libxslt1-dev liblua5.1-0-dev ruby1.8-dev libruby1.8 rubygems1.8 python-pip python-rosinstall python-vcstools emacs23 rosemacs-el git git-svn git-flow joystick python-bluez libusb-dev openni-dev

sudo pip install xbee

sudo rosdep init
rosdep update

# Test
source /opt/ros/fuerte/setup.bash
roslaunch gazebo_worlds empty_world.launch

## Git
git config --global user.name "Your Name"
git config --global user.email "you@example.com"

cat >> ~/.emacs <<EOF
;; Load the library and start it up
(require 'rosemacs)
(invoke-rosemacs)

;; Optional but highly recommended: add a prefix for quick access
;; to the rosemacs commands
(global-set-key "\C-x\C-r" ros-keymap)
EOF

## ROS workspace
mkdir ~/ros
cd ~/ros
rosws init
source setup.sh

git clone https://github.com/FalkorSystems/misc

cp misc/.rosinstall .
source setup.sh

rosws update --parallel=4
source setup.sh

sudo sh -c "echo 'source /opt/ros/fuerte/setup.bash' >> /etc/bash.bashrc"
echo 'source ~/ros/setup.sh' >> ~/.bashrc

## Make

# orocos
# http://www.ros.org/wiki/orocos_toolchain_ros

roscd orocos_toolchain
git submodule init
git submodule update
roscd ocl
git checkout toolchain-2.5
roscd orocos_toolchain
source env.sh
rosmake orocos_toolchain rtt_ros_integration rtt_ros_comm rtt_common_msgs rtt_geometry

# ardrone
roscd ardrone_autonomy
./build_sdk.sh
rosmake ardrone_autonomy

# falkor quadrotor
rosmake falkor_quadrotor

roslaunch falkor_quadrotor base.launch





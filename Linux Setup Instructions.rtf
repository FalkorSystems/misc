{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Consolas;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red255\green0\blue129;\red240\green242\blue245;\red240\green242\blue245;
\red38\green38\blue38;\red236\green236\blue236;}
\margl1440\margr1440\vieww24560\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 --\
Falkor Linux Installation Instructions\
\
-- Launch Terminal, lock to Launcher\
-- unlock useless open office stuff from launcher\
\
{\field{\*\fldinst{HYPERLINK "http://www.samontab.com/web/2012/06/installing-opencv-2-4-1-ubuntu-12-04-lts/"}}{\fldrslt http://www.samontab.com/web/2012/06/installing-opencv-2-4-1-ubuntu-12-04-lts/}}\
\
# Get upgrades\
sudo apt-get update\
sudo apt-get upgrade\
\
## OpenCV\
\
# dependencies\
\pard\pardeftab720\sl260

\f1 \cf2 sudo\cf0  apt-get \cf2 install\cf0  build-essential libgtk2.0-dev libjpeg-dev libtiff4-dev libjasper-dev libopenexr-dev cmake python-dev python-numpy python-tk libtbb-dev libeigen2-dev yasm libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev libqt4-dev libqt4-opengl-dev sphinx-common texlive-latex-extra libv4l-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev\
\
# Get OpenCV\
\pard\pardeftab720

\f2 \cf0 cd ~\
wget http://downloads.sourceforge.net/project/opencvlibrary/opencv-unix/2.4.2/OpenCV-2.4.2.tar.bz2\
tar -xvf OpenCV-2.4.2.tar.bz2\
cd OpenCV-2.4.2\
\
# build Makefiles\
mkdir build\
cd build\
cmake -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON ..\
\
# Make sure the config looks right\
\
# Make\
make\
sudo make install\
\
# Configure\
sudo echo /usr/local/lib >> /etc/ld.so.conf.d/opencv.conf\
sudo ldconfig\
\
sudo echo >> /etc/bash.bashrc <<EOF\
PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig\
export PKG_CONFIG_PATH\
EOF\
\
# Build samples\
cd ~/OpenCV-2.4.2/samples/c\
chmod +x build_all.sh\
./build_all.sh\
\
\
# Run some tests\
./facedetect --cascade="/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml" --scale=1.5 lena.jpg\
\
\pard\pardeftab720\sl260

\f1 \cf0 ./facedetect --cascade="/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml" --nested-cascade="/usr/local/share/OpenCV/haarcascades/haarcascade_eye.xml" --scale=1.5 lena.jpg\
\
~/OpenCV-2.4.2/build/bin/grabcut ~/OpenCV-2.4.2/samples/cpp/lena.jpg\
\
~/OpenCV-2.4.2/build/bin/calibration_artificial\
\
python ~/OpenCV-2.4.2/samples/python2/turing.py\
\
# Clean\
cd ~\
rm -rf ~/OpenCV-2.4.2*\
\
## ROS\
\
\pard\pardeftab720

\f2 \cf0 \cb3 sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu precise main" > /etc/apt/sources.list.d/ros-latest.list'
\fs30 \
\pard\pardeftab720\sl260

\f1\fs24 \cf0 \cb1 \
\pard\pardeftab720

\f2\fs30 \cf0 \cb3 wget http://packages.ros.org/ros.key -O - | sudo apt-key add -\
\pard\pardeftab720\sl260

\f1\fs24 \cf0 \cb1 \
\pard\pardeftab720

\f2\fs30 \cf0 \cb3 sudo apt-get update\
\pard\pardeftab720\sl260

\f1\fs24 \cf0 \cb1 \
\pard\pardeftab720

\f2\fs30 \cf0 \cb3 sudo apt-get install ros-fuerte-desktop-full\
\pard\pardeftab720\sl260

\f1\fs24 \cf0 \cb1 \
\pard\pardeftab720

\f2\fs30 \cf0 \cb3 sudo apt-get install python-rosinstall python-rosdep\
sudo apt-get install doxygen rubygems1.8 libxslt1-dev omniorb libreadline-dev omniorb omniidl omniorb-nameserver libomniorb4-1 libomniorb4-dev libomnithread3-dev libomnithread3c2 gccxml antlr libantlr-dev libxslt1-dev liblua5.1-0-dev ruby1.8-dev libruby1.8 rubygems1.8 \cb4 \
\pard\pardeftab720
\cf0 \
sudo rosdep init\
rosdep update\
\pard\pardeftab720\sl260

\f1\fs24 \cf0 \cb1 \
\pard\pardeftab720

\f2 \cf5 \cb6 sudo apt-get install python-pip\
\pard\pardeftab720\sl260

\f1 \cf0 \cb1 \
\pard\pardeftab720

\f2 \cf5 \cb6 sudo pip install -U rosinstall
\f1 \cf0 \cb1 \
\pard\pardeftab720

\f2\fs30 \cf0 \cb3 \
# Test\
source /opt/ros/fuerte/setup.bash\
roslaunch gazebo_worlds empty_world.launch\
\pard\pardeftab720\sl260

\f1\fs24 \cf0 \cb1 \
## Git\
sudo apt-get install git git-svn git-flow\
git config --global user.name "Your Name"\
git config --global user.email "you@example.com"\
\
## ROS workspace\
mkdir ~/ros\
cd ~/ros\
rosws init\
source setup.sh\
\
git clone https://github.com/FalkorSystems/misc\
\
cp misc/.rosinstall .\
source setup.sh\
\
rosws update --parallel=4\
source setup.sh\
\
echo 'source ~/ros/setup.sh' >> ~/.bashrc\
\
## Make\
roscd ardrone_autonomy\
./build_sdk.sh\
\
rosmake ardrone_autonomy\
\
\pard\pardeftab720

\f2\fs30 \cf0 \cb4 roscd orocos_toolchain\
git submodule init\
git submodule update\
roscd ocl\
git checkout toolchain-2.5\
roscd orocos_toolchain\
source env.sh\
rosmake orocos_toolchain rtt_ros_integration rtt_ros_comm rtt_common_msgs rtt_geometry\
\
\pard\pardeftab720\sl260

\f1\fs24 \cf0 \cb1 rosmake falkor_quadrotor\
\
\
\
\
}